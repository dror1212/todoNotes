{"version":3,"sources":["stores/NotesStore.tsx","components/Todo.tsx","components/Note.tsx","App.tsx","index.tsx"],"names":["NotesStore","observable","notesStore","window","Todo","props","completed","note","notes","find","note_id","_id","index","items","findIndex","item","isCompleted","axios","patch","state","Checkbox","checked","this","onChange","label","text","React","Component","Note","observer","nowDate","today","Date","String","getDate","padStart","getMonth","getFullYear","onNew","name","length","push","changed","console","log","setState","handleDeleteClick","delete","replace","filter","event","target","value","className","Label","Icon","corner","color","link","onClick","Card","fluid","Content","header","meta","create","map","key","Form","onSubmit","Input","onNameChange","bind","size","attached","placeholder","Button","basic","App","update","get","then","res","data","len","isExist","post","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96e81843.chunk.js","sourcesContent":["import { observable, IObservableArray } from \"mobx\";\r\nimport { NoteProps } from \"../components/Note\";\r\n\r\nclass NotesStore {\r\n  @observable notes: IObservableArray<NoteProps> = observable([]);\r\n}\r\n\r\nvar notesStore = ((window as any).notesStore = new NotesStore());\r\n\r\nexport default notesStore;\r\n","import React from \"react\";\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport notesStore from \"../stores/NotesStore\";\r\nimport axios from \"axios\";\r\nimport { NoteProps } from \"./Note\";\r\n\r\nexport type TodoProps = {\r\n  text: string;\r\n  isCompleted: boolean;\r\n  _id: number;\r\n  note_id: number;\r\n};\r\n\r\ninterface IState {}\r\n\r\nclass Todo extends React.Component<TodoProps, IState> {\r\n  constructor(props: Readonly<TodoProps>) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  completed = () => {\r\n    const note = notesStore.notes.find((note: NoteProps) => {\r\n      return this.props.note_id === note._id;\r\n    });\r\n    if (note) {\r\n      const index: number = note.items.findIndex(\r\n        (item: any) => this.props._id === item._id\r\n      );\r\n      note.items[index].isCompleted = !note.items[index].isCompleted;\r\n      axios.patch(\"http://localhost:5000/updateNote/\" + note._id, note);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Checkbox\r\n          checked={this.props.isCompleted}\r\n          onChange={this.completed}\r\n          label={this.props.text}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport { Card, Button, Input, Label, Icon, Form } from \"semantic-ui-react\";\r\nimport Todo from \"./Todo\";\r\nimport { observer } from \"mobx-react\";\r\nimport axios from \"axios\";\r\nimport notesStore from \"../stores/NotesStore\";\r\n\r\nexport type NoteProps = {\r\n  _id: number;\r\n  name: string;\r\n  create: string;\r\n  changed: string;\r\n  items: { _id: number; text: string; isCompleted: boolean }[];\r\n  isExist: boolean;\r\n};\r\ninterface IState {\r\n  name: string;\r\n  changed: string;\r\n}\r\n@observer\r\nclass Note extends React.Component<NoteProps, IState> {\r\n  constructor(props: Readonly<NoteProps>) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      changed: this.props.changed\r\n    };\r\n  }\r\n\r\n  nowDate = () => {\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, \"0\");\r\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n    return dd + \"/\" + mm + \"/\" + yyyy;\r\n  };\r\n\r\n  onNew = () => {\r\n    if (this.state.name.length > 0) {\r\n      const note = notesStore.notes.find((note: NoteProps) => {\r\n        return this.props._id === note._id;\r\n      });\r\n\r\n      if (note) {\r\n        note.items.push({\r\n          _id: this.props.items.length,\r\n          text: this.state.name,\r\n          isCompleted: false\r\n        });\r\n        note.changed = this.nowDate();\r\n        console.log(this.props._id);\r\n        axios.patch(\"http://localhost:5000/updateNote/\" + note._id, note);\r\n        this.setState({ changed: this.nowDate(), name: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  onNameChange(event: any) {\r\n    this.setState({ name: event.target.value });\r\n  }\r\n\r\n  handleDeleteClick = () => {\r\n    axios.delete(\"http://localhost:5000/deleteSpecificNote/\" + this.props._id);\r\n    notesStore.notes.replace(\r\n      notesStore.notes.filter((note: NoteProps) => {\r\n        return note._id !== this.props._id;\r\n      })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App-header\">\r\n        <Label>\r\n          <Icon\r\n            corner=\"top right\"\r\n            color=\"red\"\r\n            name=\"delete\"\r\n            link\r\n            onClick={this.handleDeleteClick}\r\n          />\r\n          <Card fluid={true}>\r\n            <Card.Content\r\n              header={this.props.name}\r\n              meta={\r\n                \"Created: \" +\r\n                this.props.create +\r\n                \"   Edited: \" +\r\n                this.state.changed\r\n              }\r\n            />\r\n            {this.props.items.map(item => (\r\n              <Todo\r\n                key={item._id}\r\n                note_id={this.props._id}\r\n                _id={item._id}\r\n                text={item.text}\r\n                isCompleted={item.isCompleted}\r\n              ></Todo>\r\n            ))}\r\n            {\"\\n\"}\r\n            <Form onSubmit={this.onNew}>\r\n              <Input\r\n                onChange={this.onNameChange.bind(this)}\r\n                fluid={true}\r\n                size=\"small\"\r\n                attached=\"top\"\r\n                placeholder=\"Name...\"\r\n                value={this.state.name}\r\n              ></Input>\r\n              <Button\r\n                onClick={this.onNew}\r\n                basic={false}\r\n                color=\"orange\"\r\n                size=\"small\"\r\n              >\r\n                Add\r\n              </Button>\r\n            </Form>\r\n          </Card>\r\n        </Label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Note;\r\n\r\n// window.notesStore.notes.push({_id:0,name:\"hello\",create:1234,changed:4320,items: [\"aaaa\",\"bbbb\",\"cccc\"]})\r\n","import React from \"react\";\r\nimport Note, { NoteProps } from \"./components/Note\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\nimport { Button, Input, Form } from \"semantic-ui-react\";\r\nimport notesStore from \"./stores/NotesStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport axios from \"axios\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n  name: string;\r\n}\r\n@observer\r\nclass App extends React.Component<IProps, IState> {\r\n  constructor(props: Readonly<IProps>) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.update();\r\n  }\r\n\r\n  update = () => {\r\n    axios.get(\"http://localhost:5000/getAllNotes\").then((res: any) => {\r\n      notesStore.notes.replace(res.data);\r\n    });\r\n  };\r\n\r\n  onNew = () => {\r\n    if (notesStore.notes.length < 10 && this.state.name.length > 0) {\r\n      let len = 0;\r\n      if (notesStore.notes.length > 0)\r\n        len = notesStore.notes[notesStore.notes.length - 1]._id + 1;\r\n      const note = {\r\n        _id: len,\r\n        name: this.state.name,\r\n        create: this.nowDate(),\r\n        changed: this.nowDate(),\r\n        items: [],\r\n        isExist: false\r\n      };\r\n      notesStore.notes.push(note);\r\n      axios.post(\"http://localhost:5000/createNote\", note);\r\n      this.setState({ name: \"\" });\r\n    }\r\n  };\r\n\r\n  nowDate = () => {\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, \"0\");\r\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n    return dd + \"/\" + mm + \"/\" + yyyy;\r\n  };\r\n\r\n  onNameChange(event: any) {\r\n    this.setState({ name: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-back\">\r\n        <Form onSubmit={this.onNew}>\r\n          <Button\r\n            onClick={this.onNew}\r\n            fluid={true}\r\n            size=\"big\"\r\n            attached=\"top\"\r\n            color=\"blue\"\r\n          >\r\n            New\r\n          </Button>\r\n          <Input\r\n            onChange={this.onNameChange.bind(this)}\r\n            fluid={true}\r\n            size=\"big\"\r\n            attached=\"top\"\r\n            placeholder=\"Name...\"\r\n            value={this.state.name}\r\n          ></Input>\r\n        </Form>\r\n        {notesStore.notes.map((note: NoteProps) => (\r\n          <Note\r\n            key={note._id}\r\n            isExist={note.isExist}\r\n            items={note.items}\r\n            changed={note.changed}\r\n            create={note.create}\r\n            _id={note._id}\r\n            name={note.name}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}